1+1
1+1
2+3
3/3
3//2
3%100
100-29
clear
clear()
sqrt(16)
log(10)
exp(1)
x <- c(1, 2, 3, 4, 5)
mean(x)
median(x)
sd(x)
summary(x)
data(iris)
head(iris)
str(iris)
summary(iris)
View(iris)
names(iris)
unique(iris$Species)
iris$Sepal.Length
iris[iris$Species == "setosa", ]
iris$Ratio <- iris$Petal.Length / iris$Petal.Width
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
main = "Sepal Length vs Width")
boxplot(Sepal.Length ~ Species, data = iris,
main = "Longueur des sépales selon l'espèce")
hist(iris$Petal.Length, breaks = 10, col = "lightblue")
install.packages("dplyr")
library(dplyr)
iris %>%
group_by(Species) %>%
summarise(moyenne = mean(Sepal.Length),
ecart_type = sd(Sepal.Length))
install.packages("ggplot2")
library(ggplot2)
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point(size = 3) +
theme_minimal()
ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) +
geom_boxplot() +
theme_classic()
library(corrplot)
write.csv(iris, "iris_export.csv", row.names = FALSE)
png("scatterplot.png")
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species)
dev.off()
View(iris)
View(iris)
View(iris)
install.packages("languageserver")
q()
str(iris)
summary(iris)
data("HairEyeColor")
head("HairEyeColor")
head(HairEyeColor)
summary()
summary(HairEyeColor)
view(HairEyeColor)
View(HairEyeColor)
data("mtcars")
force(mtcars)
View(iris)
View(mtcars)
View(mtcars)
plot(mtcars$hp, mtcars$mpg,
xlab="hp", ylab="wt",
col="blue", pch=16,
main="Puissance vs Poids")
hist(mtcars$hp, col="lightblue",
main="Répartition des puissances des véhicules")
boxplot(mpg ~ cyl, data=mtcars,
main="Consommation par nombre de cylindres")
View(iris)
View(iris)
iris[iris$Species == "versicolor", ]
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
main = "Sepal Length vs Width")
plot(iris$Sepal.Length, iris$Sepal.Width,
col = iris$versicolor,
main = "Sepal Length vs Width")
versicolor <- subset(iris, Species == "versicolor")
View(versicolor)
head(versicolor)
summary(versicolor)
plot(versicolor$Sepal.Length, iris$Sepal.Width,
col = iris$Species,
main = "Sepal Length vs Width")
plot(versicolor$Sepal.Length, versicolor$Sepal.Width,
col = iris$Species,
main = "Sepal Length vs Width")
cor(versicolor[, 1:4])
hist(versicolor$Petal.Length, col="lightblue", main="Distribution Petal.Length (Versicolor)")
boxplot(versicolor[, 1:4], main="Boxplot des variables pour Versicolor", col="lightgreen")
pairs(versicolor[, 1:4], main="Scatterplot matrix - Versicolor")
library(ggplot2)
ggplot(versicolor, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(color = "purple") +
ggtitle("Petal.Length vs Petal.Width (Versicolor)")
target <- 3.243
tol <- 0.001
result <- versicolor[abs(versicolor$petal_ratio - target) < tol, ]
print(result)
distances <- apply(versicolor[, 1:4], 1, function(row) {
sqrt(sum((row - moyennes)^2))
})
moyennes <- colMeans(versicolor[, 1:4])
distances <- apply(versicolor[, 1:4], 1, function(row) {
sqrt(sum((row - moyennes)^2))
})
index_min <- which.min(distances)
representative_leaf <- versicolor[index_min, ]
versicolor$distance_to_mean <- distances
ggplot(versicolor, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = distance_to_mean), size = 3) +
scale_color_gradient(low = "blue", high = "red") +
geom_point(data = representative_leaf,
aes(x = Petal.Length, y = Petal.Width),
color = "black", size = 5, shape = 8) +
ggtitle("Versicolor - Distance à la moyenne (feuille la plus typique en noir)") +
theme_minimal()
which(iris$Species == "versicolor")[index_min]
apply(versicolor[, 1:4], 2, function(x) sd(x) / mean(x))
num_data <- as.matrix(versicolor[, 1:4])
num_data_scaled <- scale(num_data)
heatmap(num_data_scaled,
Rowv = NA, Colv = NA,
col = heat.colors(256),
scale = "none",
main = "Heatmap des valeurs standardisées (Versicolor)")
pheatmap(num_data_scaled,
main = "Heatmap avec clustering - Versicolor",
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
library(corrplot)
cor_matrix <- cor(versicolor[, 1:4])
corrplot::corrplot(cor_matrix, method = "color")
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(corrplot)
library(GGally)
install.packages("GGally")
library(tidyverse)
library(corrplot)
library(GGally)
cor_matrix <- cor(versicolor[,1:4])
corrplot(cor_matrix, method = "mixed",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 45,
addCoef.col = "black",
title = "Corrélations Setosa vs Autres Espèces")
cor_matrix <- cor(versicolor)
cor_matrix <- cor(versicolor[, 1:4])
corrplot(cor_matrix, method = "mixed",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 45,
addCoef.col = "black",
title = "Corrélations internes - Versicolor")
corrplot(cor_matrix, method = "circle",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 45,
addCoef.col = "black",
title = "Corrélations internes - Versicolor")
corrplot(cor_matrix, method = "color",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 45,
addCoef.col = "black",
title = "Corrélations internes - Versicolor")
corrplot(cor_matrix, method = "color",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 90,
addCoef.col = "black",
title = "Corrélations internes - Versicolor")
corrplot(cor_matrix, method = "color",
lower = "number", upper = "ellipse",
tl.col = "black", tl.srt = 45,
addCoef.col = "black",
title = "Corrélations internes - Versicolor")
View(versicolor)
summary(versicolor)
View(iris)
library(tidyverse)
library(gridExtra)
install.packages("gridExtra")
library(tidyverse)
library(gridExtra)
library(tidyverse)
library(gridExtra)
data(iris)
versicolor <- iris %>% filter(Species == "versicolor")
plot_hist <- function(data, variable_name) {
var <- data[[variable_name]]
ggplot(data, aes(x = var)) +
geom_histogram(aes(y = ..density..), fill = "palegreen4", color = "black", bins = 10) +
geom_density(color = "darkred", size = 1) +
geom_vline(aes(xintercept = mean(var)), color = "blue", linetype = "dashed", size = 1) +
geom_vline(aes(xintercept = median(var)), color = "red", linetype = "dotted", size = 1) +
labs(title = variable_name, x = "Value (cm)", y = "Density") +
theme_minimal()
}
p1 <- plot_hist(versicolor, "Petal.Length")
p2 <- plot_hist(versicolor, "Petal.Width")
p3 <- plot_hist(versicolor, "Sepal.Length")
p4 <- plot_hist(versicolor, "Sepal.Width")
grid.arrange(p1, p2, p3, p4, ncol = 2,
top = "Distribution Analysis - Iris Versicolor\nHistograms with density curves (n=50) | Blue dashed: Mean | Red dotted: Median")
ggpairs(iris,
columns = 1:4,
aes(color = Species, alpha = 0.7)) +
ggtitle("Scatter Plot Pairwise - Iris Dataset")
library(GGally)
ggpairs(iris,
columns = 1:4,
aes(color = Species, alpha = 0.7)) +
ggtitle("Scatter Plot Pairwise - Iris Dataset")
library(ggplot2)
library(tidyverse)
data(iris)
variables <- names(iris)[1:4]
for (var in variables) {
ggplot(iris, aes_string(x = var, fill = "Species")) +
geom_density(alpha = 0.6) +
labs(title = paste("Courbe de densité -", var),
x = var, y = "Densité") +
theme_minimal() +
theme(plot.title = element_text(face = "bold", hjust = 0.5)) +
scale_fill_manual(values = c("setosa" = "#E41A1C", "versicolor" = "#377EB8", "virginica" = "#4DAF4A")) -> p
print(p)
}
library(gridExtra)
plots <- lapply(variables, function(var) {
ggplot(iris, aes_string(x = var, fill = "Species")) +
geom_density(alpha = 0.6) +
labs(title = var, x = var, y = "Densité") +
theme_minimal() +
scale_fill_manual(values = c("setosa" = "#E41A1C", "versicolor" = "#377EB8", "virginica" = "#4DAF4A"))
})
grid.arrange(grobs = plots, ncol = 2)
install.packages("shiny")
install.packages("shinydashboard")
setwd("C:/Users/axela/Desktop/LaPlateforme/Projets Ecole/AI/Projet 14 - Dashboard R/Projet_R_2_NAME/data/raw")
setwd("C:/Users/axela/Desktop/LaPlateforme/Projets Ecole/AI/Projet 14 - Dashboard R/Projet_R_2_NAME/data/raw")
library(shiny)
library(dplyr)
library(ggplot2)
df_working <- read.csv("../data/raw/baccalaureate_by_academy_france.csv",sep = ";", stringsAsFactors = FALSE)
df_working <- read.csv("baccalaureate_by_academy_france.csv",sep = ";", stringsAsFactors = FALSE)
print(names(df_working))
ui <- fluidPage(
titlePanel("Dashboard Bac par Académie (France)"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Année :", choices = c("Toutes", unique(df_working$Session)), multiple = TRUE),
selectInput("academy", "Académie :", choices = c("Toutes", unique(df_working$Academy)), multiple = TRUE),
selectInput("specialty", "Spécialité :", choices = c("Toutes", unique(df_working$Diploma_Specialty)), multiple = TRUE)
),
mainPanel(
h3("Pourcentage de Réussite"),
textOutput("pourcentage_reussite"),
h3("Répartition des Filières"),
plotOutput("camembert_filiere"),
h3("Répartition des Mentions (Score simulé)"),
plotOutput("courbe_mentions")
)
)
)
print(names(df_working))
# Serveur
server <- function(input, output, session) {
data_filtered <- reactive({
data <- df_working
# Filtre année
if (!("Toutes" %in% input$year)) {
data <- data[data$Session %in% input$year, ]
}
# Filtre académie
if (!("Toutes" %in% input$academy)) {
data <- data[data$Academy %in% input$academy, ]
}
# Filtre spécialité
if (!("Toutes" %in% input$specialty)) {
data <- data[data$Diploma_Specialty %in% input$specialty, ]
}
data
})
observe({
if ("Toutes" %in% input$year) {
updateSelectInput(session, "year", selected = unique(df_working$Session))
}
if ("Toutes" %in% input$academy) {
updateSelectInput(session, "academy", selected = unique(df_working$Academy))
}
if ("Toutes" %in% input$specialty) {
updateSelectInput(session, "specialty", selected = unique(df_working$Diploma_Specialty))
}
})
output$pourcentage_reussite <- renderText({
data <- data_filtered()
if (nrow(data) == 0) return("Pas de données")
pourcentage <- sum(data$Total_Number_Admitted) / sum(data$Number_of_Attendees) * 100
paste0(round(pourcentage, 2), "% de réussite")
})
output$camembert_filiere <- renderPlot({
data <- data_filtered()
if (nrow(data) == 0) return(NULL)
df_working_pie <- data %>%
group_by(Path) %>%
summarise(nb = sum(Number_of_Attendees))
ggplot(df_working_pie, aes(x = "", y = nb, fill = Path)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Répartition des Filières (Path)")
})
output$courbe_mentions <- renderPlot({
data <- data_filtered()
if (nrow(data) == 0) return(NULL)
# Construction du tableau avec les mentions + scores
mentions <- data.frame(
Mention = c("Très Bien + Félicitations", "Très Bien", "Bien", "Assez Bien", "Passable","Refusé"),
Score = c(18, 16, 14, 12, 10, 8),
Nombre = c(
sum(data$Number_Admitted_With_Highest_Honors_With_Jury_Congratulations),
sum(data$Number_Admitted_With_Highest_Honors_Without_Jury_Congratulations),
sum(data$Number_Admitted_With_High_Honors),
sum(data$Number_Admitted_With_Honors),
sum(data$Number_Admitted_Without_Honors),
sum(data$Total_Number_Rejected)
)
)
ggplot(mentions, aes(x = Score, y = Nombre, fill = Mention)) +
geom_col(width = 0.9, alpha = 0.8) +
labs(title = "Répartition simulée des mentions", x = "Score estimé", y = "Nombre de candidats") +
theme_minimal()
})
}
# Lancement
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Dashboard Bac par Académie (France)"),
sidebarLayout(
sidebarPanel(
selectInput("year", "Année :", choices = c("Toutes", unique(df_working$Session)), multiple = TRUE),
selectInput("academy", "Académie :", choices = c("Toutes", unique(df_working$Academy)), multiple = TRUE),
selectInput("specialty", "Spécialité :", choices = c("Toutes", unique(df_working$Diploma_Specialty)), multiple = TRUE)
),
mainPanel(
h3("Pourcentage de Réussite"),
textOutput("pourcentage_reussite"),
h3("Répartition des Filières"),
plotOutput("camembert_filiere"),
h3("Répartition des Mentions (Score simulé)"),
plotOutput("courbe_mentions")
)
)
)
print(names(df_working))
# Serveur
server <- function(input, output, session) {
data_filtered <- reactive({
data <- df_working
# Filtre année
if (!("Toutes" %in% input$year)) {
data <- data[data$Session %in% input$year, ]
}
# Filtre académie
if (!("Toutes" %in% input$academy)) {
data <- data[data$Academy %in% input$academy, ]
}
# Filtre spécialité
if (!("Toutes" %in% input$specialty)) {
data <- data[data$Diploma_Specialty %in% input$specialty, ]
}
data
})
observe({
if ("Toutes" %in% input$year) {
updateSelectInput(session, "year", selected = unique(df_working$Session))
}
if ("Toutes" %in% input$academy) {
updateSelectInput(session, "academy", selected = unique(df_working$Academy))
}
if ("Toutes" %in% input$specialty) {
updateSelectInput(session, "specialty", selected = unique(df_working$Diploma_Specialty))
}
})
output$pourcentage_reussite <- renderText({
data <- data_filtered()
if (nrow(data) == 0) return("Pas de données")
pourcentage <- sum(data$Total_Number_Admitted) / sum(data$Number_of_Attendees) * 100
paste0(round(pourcentage, 2), "% de réussite")
})
output$camembert_filiere <- renderPlot({
data <- data_filtered()
if (nrow(data) == 0) return(NULL)
df_working_pie <- data %>%
group_by(Path) %>%
summarise(nb = sum(Number_of_Attendees))
ggplot(df_working_pie, aes(x = "", y = nb, fill = Path)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y") +
theme_void() +
labs(title = "Répartition des Filières (Path)")
})
output$courbe_mentions <- renderPlot({
data <- data_filtered()
if (nrow(data) == 0) return(NULL)
# Construction du tableau empilé
mentions_stacked <- data %>%
group_by(Path) %>%
summarise(
`Très Bien + Félicitations` = sum(Number_Admitted_With_Highest_Honors_With_Jury_Congratulations),
`Très Bien` = sum(Number_Admitted_With_Highest_Honors_Without_Jury_Congratulations),
Bien = sum(Number_Admitted_With_High_Honors),
`Assez Bien` = sum(Number_Admitted_With_Honors),
Passable = sum(Number_Admitted_Without_Honors),
Refusé = sum(Total_Number_Rejected)
) %>%
tidyr::pivot_longer(
cols = -Path,
names_to = "Mention",
values_to = "Nombre"
)
# Affichage en histogramme empilé
ggplot(mentions_stacked, aes(x = Mention, y = Nombre, fill = Path)) +
geom_col(position = "stack") +
labs(title = "Répartition des Mentions par Type de Bac", x = "Mention", y = "Nombre de candidats") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
}
# Lancement
shinyApp(ui = ui, server = server)
